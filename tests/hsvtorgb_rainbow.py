import time
from hsvtorgb_rainbow import hsv2rgb_rainbow, rainbow_wheel
from PIL import Image, ImageDraw, ImageColor
from adafruit_fancyled.fastled_helpers import hsv2rgb_spectrum

sampling = None # Image.Resampling.BICUBIC
# BICUBIC BILINEAR BOX HAMMING LANCZOS NEAREST
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (100, 100, 255) # brighter for easier viewing

SPC = 4
SPECTRUM = 80
CHART = 256
THIS_TOP = SPECTRUM + SPC + CHART + SPC

def fancy_version(hsv):
    spec_color = hsv2rgb_spectrum(*hsv)
    return tuple(int(256 * x) for x in (spec_color.red, spec_color.green, spec_color.blue))

def uniform_spectrum(hsv):
    # Uniform brightness version from the graph in the fastLED docs
    hue, val, sat = hsv
    if hue <= 85:
        r = 256 - hue * 3
        g = hue * 3
        b = 0
    elif hue <= 170:
        r = 0
        g = 256 - (hue - 85) * 3
        b = (hue - 85) * 3
    else:
        r = (hue - 170) * 3
        g = 0
        b = 256 - (hue - 170) * 3
    r, g, b = (int(x * val / 256) for x in (r, g, b))
    r, g, b = (int(x * sat / 256) + (256 - sat) for x in (r, g, b))
    return (r,g,b)


FUNCTIONS = {
    (
        "hsv2rgb_rainbow",
        hsv2rgb_rainbow,
        lambda hsv: (int(x) for x in hsv)
    ),
    # Version generated by PIL basic RGB interpolation
    (
        "pilrgb",
        ImageColor.getrgb,
        lambda hsv: f"hsv({hsv[0]*360/256}, {hsv[1]/2.56}%, {hsv[2]/2.56}%)"
    ),
    # Version from FancyLED
    (
        "hsv2rgb_spectrum",
        fancy_version,
        lambda hsv: hsv
    ),
    (
        "uniform_spectrum",
        uniform_spectrum,
        lambda hsv: hsv
    ),
    (
        "rainbow_wheel",
        rainbow_wheel,
        lambda hsv: hsv[0]
    ),
}

for name, color_function, params in FUNCTIONS:

    img = Image.new("RGBA", (512, THIS_TOP), color=(0, 0, 0))
    draw = ImageDraw.Draw(img)

    val = 255
    sat = 255

    for index in range(5120):
        xpos = index // 10
        hue = (index/10) % 256

        rgb = color_function(params((hue, val, sat)))
        rgb_ref = tuple(int(round(v)) for v in rgb)

        top = 0
        # spectrum
        draw.line((xpos, top, xpos, top + SPECTRUM), fill=rgb_ref, width=2)
        # components
        offset = top + SPECTRUM + SPC
        for i, color in zip(rgb_ref, (RED, GREEN, BLUE)):
            height = (256 - i)
            position = (xpos, offset + height)
            endpoint = (xpos + 1, offset + height + 1)
            #draw.line((position, endpoint), fill=color, width=2)
            #draw.point(position, fill=color)
            draw.circle(position, radius=0.5, fill=color)

    resized = img.resize((img.width, img.height // 2), sampling)
    resized.save(f"_tmp_sample-{name}.png")
